@page "/account/profile"
@model HardwareStore_Application.Pages.Account.ProfileModel
@{
    ViewData["Title"] = "Profile";
    Layout = "_Layout";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: #0f1419;
            color: white;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
            display: grid;
            grid-template-columns: 350px 1fr;
            gap: 2rem;
        }

        .back-btn {
            color: #4285f4;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 2rem;
            font-size: 0.95rem;
        }

        .back-btn:hover {
            text-decoration: underline;
        }

        .profile-sidebar {
            background: #1a202c;
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            height: fit-content;
        }

        .profile-avatar {
            width: 80px;
            height: 80px;
            background: #4285f4;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1rem;
            font-size: 2rem;
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .profile-email {
            color: #a0aec0;
            margin-bottom: 1.5rem;
        }

        .premium-badge {
            background: #4285f4;
            color: white;
            padding: 0.4rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .main-content {
            background: #1a202c;
            border-radius: 12px;
            overflow: hidden;
        }

        .tabs {
            display: flex;
            border-bottom: 1px solid #2d3748;
        }

        .tab {
            flex: 1;
            padding: 1rem 2rem;
            background: none;
            border: none;
            color: #a0aec0;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .tab.active {
            background: #4285f4;
            color: white;
        }

        .tab:hover:not(.active) {
            background: #2d3748;
            color: white;
        }

        .tab-content {
            padding: 2rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 2rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group.full-width {
            grid-column: 1 / -1;
        }

        .form-label {
            color: #e2e8f0;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .form-input {
            background: #2d3748;
            border: 1px solid #4a5568;
            color: white;
            padding: 0.75rem 1rem;
            border-radius: 6px;
            font-size: 1rem;
        }

        .form-input:focus {
            outline: none;
            border-color: #4285f4;
            box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.1);
        }

        .btn {
            background: #4285f4;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-size: 1rem;
            cursor: pointer;
            font-weight: 500;
            transition: background 0.2s;
        }

        .btn:hover {
            background: #3367d6;
        }

        .btn-secondary {
            background: #4a5568;
        }

        .btn-secondary:hover {
            background: #2d3748;
        }

        .edit-btn {
            background: transparent;
            color: #4285f4;
            border: 1px solid #4285f4;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-size: 0.9rem;
            cursor: pointer;
            float: right;
        }

        .edit-btn:hover {
            background: #4285f4;
            color: white;
        }

        .order-item {
            background: #2d3748;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
        }

        .order-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .order-id {
            font-weight: 600;
            font-size: 1.1rem;
        }

        .order-status {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            margin-left: 1rem;
        }

        .status-delivered {
            background: #10b981;
            color: white;
        }

        .status-shipped {
            background: #4285f4;
            color: white;
        }

        .order-total {
            font-size: 1.25rem;
            font-weight: 600;
            text-align: right;
        }

        .order-date {
            color: #a0aec0;
            font-size: 0.9rem;
            text-align: right;
        }

        .order-items {
            margin: 1rem 0;
            color: #e2e8f0;
        }

        .order-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        .success-message {
            background: #10b981;
            color: white;
            padding: 1rem;
            border-radius: 6px;
            margin-bottom: 1rem;
        }

    </style>
</head>
<body>
    <div class="container">
        <a href="/" class="back-btn">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
            </svg>
            Back to Home
        </a>

        <div class="profile-sidebar">
            <div class="profile-avatar">
                @Model.UserProfile.FullName[0]
            </div>
            <h2 class="profile-name">@Model.UserProfile.FullName</h2>
            <p class="profile-email">@Model.UserProfile.Email</p>
            @if (Model.UserProfile.IsPremiumMember)
            {
                <span class="premium-badge">Premium Member</span>
            }
        </div>

        <div class="main-content">
            <div class="tabs">
                <a href="#profile" class="tab active">Profile</a>
                <a href="#address" class="tab">Address</a>
                <a href="#orders" class="tab">Orders</a>
            </div>

            <div class="tab-content">
                <div id="profile" class="tab-pane">
                    <h3 class="section-title">Profile Information</h3>
                    <form method="post" asp-page-handler="UpdateProfile">
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label" asp-for="UserProfile.FullName">Full Name</label>
                                <input class="form-input" asp-for="UserProfile.FullName" />
                                <span asp-validation-for="UserProfile.FullName" class="field-validation-error"></span>
                            </div>
                            <div class="form-group">
                                <label class="form-label" asp-for="UserProfile.Email">Email</label>
                                <input class="form-input" asp-for="UserProfile.Email" readonly />
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label" asp-for="UserProfile.Phone">Phone Number</label>
                                <input class="form-input" asp-for="UserProfile.Phone" />
                                <span asp-validation-for="UserProfile.Phone" class="field-validation-error"></span>
                            </div>
                        </div>

                        <button type="submit" class="btn">Save Changes</button>
                    </form>
                </div>

                <div id="address" class="tab-pane" style="display: none;">
                    <h3 class="section-title">Shipping Address</h3>
                    <form method="post" asp-page-handler="UpdateAddress">
                        <div class="form-row">
                            <div class="form-group full-width">
                                <label class="form-label" asp-for="Address.StreetAddress">Street Address</label>
                                <input class="form-input" asp-for="Address.StreetAddress" />
                                <span asp-validation-for="Address.StreetAddress" class="field-validation-error"></span>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label" asp-for="Address.City">City</label>
                                <input class="form-input" asp-for="Address.City" />
                                <span asp-validation-for="Address.City" class="field-validation-error"></span>
                            </div>
                            <div class="form-group">
                                <label class="form-label" asp-for="Address.State">State</label>
                                <input class="form-input" asp-for="Address.State" />
                                <span asp-validation-for="Address.State" class="field-validation-error"></span>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label" asp-for="Address.ZipCode">ZIP Code</label>
                                <input class="form-input" asp-for="Address.ZipCode" />
                                <span asp-validation-for="Address.ZipCode" class="field-validation-error"></span>
                            </div>
                            <div class="form-group">
                                <label class="form-label" asp-for="Address.Country">Country</label>
                                <input class="form-input" asp-for="Address.Country" />
                                <span asp-validation-for="Address.Country" class="field-validation-error"></span>
                            </div>
                        </div>

                        <button type="submit" class="btn">Update Address</button>
                    </form>
                </div>

                <div id="orders" class="tab-pane" style="display: none;">
                    <h3 class="section-title">Order History</h3>
                    @if (Model.Orders.Any())
                    {
                        foreach (var order in Model.Orders)
                        {
                            <div class="order-item">
                                <div class="order-header">
                                    <span class="order-id">Order #@order.OrderId</span>
                                    <span class="order-status status-@order.Status.ToLower()">@order.Status</span>
                                </div>
                                <div class="order-details">
                                    <p>Date: @order.OrderDate.ToString("MMM dd, yyyy")</p>
                                    <p>Total: $@order.TotalAmount.ToString("F2")</p>
                                </div>
                                <div class="order-actions">
                                    <button class="btn btn-secondary">View Details</button>
                                    @if (order.Status == "Delivered")
                                    {
                                        <button class="btn">Write Review</button>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <h3>No Orders Yet</h3>
                            <p>Start shopping to see your orders here.</p>
                            <a href="/" class="btn">Browse Products</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        <partial name="_ValidationScriptsPartial" />
        <script>
            // Tab switching
            document.addEventListener('DOMContentLoaded', function() {
                const tabs = document.querySelectorAll('.tab');
                const tabPanes = document.querySelectorAll('.tab-pane');
                
                // Function to switch tabs
                function switchTab(targetId) {
                    // Update active tab
                    tabs.forEach(tab => {
                        if (tab.getAttribute('href') === '#' + targetId) {
                            tab.classList.add('active');
                        } else {
                            tab.classList.remove('active');
                        }
                    });
                    
                    // Show corresponding content
                    tabPanes.forEach(pane => {
                        if (pane.id === targetId) {
                            pane.style.display = 'block';
                        } else {
                            pane.style.display = 'none';
                        }
                    });
                }
                
                // Add click handlers to tabs
                tabs.forEach(tab => {
                    tab.addEventListener('click', (e) => {
                        e.preventDefault();
                        const targetId = tab.getAttribute('href').substring(1);
                        switchTab(targetId);
                    });
                });
                
                // Check URL hash for initial tab
                const hash = window.location.hash.substring(1);
                if (hash && document.getElementById(hash)) {
                    switchTab(hash);
                }
            });

            // Show validation summary if there are errors
            document.addEventListener('DOMContentLoaded', function() {
                const errors = document.querySelectorAll('.field-validation-error');
                
                if (errors.length > 0) {
                    let hasErrors = false;
                    errors.forEach(error => {
                        if (error.textContent.trim()) {
                            hasErrors = true;
                        }
                    });
                    
                    if (hasErrors) {
                        const errorMessage = document.querySelector('.error-message');
                        if (errorMessage) {
                            errorMessage.style.display = 'block';
                        }
                    }
                }
            });
        </script>
    }
</body>
</html>
